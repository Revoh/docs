@startuml
' declate title
title 1.1.5. Request transfer status (getTransferStatusById) - Phase2 version

autonumber

' declare actors
actor "DFSP(n)\nParticipant" as DFSP
control "ML API Notification Event Handler" as NOTIFY_HANDLER
boundary "Central Service API" as CSAPI
collections "Event-Topic" as TOPIC_EVENTS
entity "Transfer-DAO" as TRANSFER_DAO
database "Central Store" as DB

box "Financial Service Provider" #lightGray
	participant DFSP
end box

box "ML API Adapter Service" #LightBlue
	participant NOTIFY_HANDLER
end box

box "Central Service" #LightYellow
    participant CSAPI
    participant TOPIC_EVENTS
    participant TRANSFER_DAO
    participant DB
end box

' start flow
group Request transfer status
    activate DFSP
    DFSP -> NOTIFY_HANDLER: Callback transfer status request URL - GET - /transfers/{ID}
'alt invalid tansferId
'    activate NOTIFY_HANDLER
'    NOTIFY_HANDLER -> NOTIFY_HANDLER: Validate TransferId
'    break
'        note right of NOTIFY_HANDLER #yellow
'            {
'                "errorInformation": {
'                    "errorCode": <integer>,
'                    "errorDescription": "Invalid payload or state"
'                }
'            }
'        end note
'        DFSP <-- NOTIFY_HANDLER: Respond HTTP - 4xx (Bad Request)
'    end
'else valid transfer
    |||
    group Persist Event Information
'        hnote over NOTIFY_HANDLER #Pink
'        Do we need to write the event to the Event-Topic?
'        Not transaction related.
'        end hnote
        NOTIFY_HANDLER -> CSAPI: Request transfer information - GET - /transfers/{ID}
        activate CSAPI

        activate TOPIC_EVENTS
        CSAPI -> TOPIC_EVENTS: Publish event information
        |||
        ref over TOPIC_EVENTS :  Event Handler Consume {[[https://github.com/mojaloop/docs/blob/develop/CentralServices/seq_diagrams/seq-event-9.1.0.svg 9.1.0.]]} \n
        |||
        CSAPI <-- TOPIC_EVENTS: Return success
        deactivate TOPIC_EVENTS
        CSAPI --> NOTIFY_HANDLER: Return success
        deactivate CSAPI
    end
        DFSP <-- NOTIFY_HANDLER: Respond HTTP - 200 (OK)
'end
    NOTIFY_HANDLER -> CSAPI: Request details for Transfer - GET - /transfers/{ID}\n<color #FF0000><b>Error code:</b> 2003</color>
    activate CSAPI
    CSAPI -> TRANSFER_DAO: Request transfer status\n<color #FF0000><b>Error code:</b> 2003</color>
    activate TRANSFER_DAO
    TRANSFER_DAO -> DB: Fetch transfer status
    activate DB
    hnote over DB #lightyellow
        SELECT transferId, transferStateId
        FROM **transferStateChange**
        WHERE transferId = {ID}
        ORDER BY transferStateChangeId desc limit 1
    end note
    deactivate DB
    CSAPI <-- TRANSFER_DAO: Return transfer status
    deactivate TRANSFER_DAO
    NOTIFY_HANDLER <-- CSAPI: Return transfer status\n<color #FF0000><b>Error codes:</b> 3202, 3203</color>
    deactivate CSAPI

    alt Is there a transfer with the given ID recorded in the system?
        alt Yes AND transferState is COMMITTED \nThis implies that a succesful transfer with the given ID is recorded in the system
            note left of NOTIFY_HANDLER #yellow
                {
                    “fulfilment”: “WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8",
                    “completedTimestamp”: “2018-09-24T08:38:08.699-04:00",
                    “transferState”: “COMMITTED”,
                    extensionList:
                        {
                        extension:
                        [
                            {
                            “key”: “Description”,
                            “value”: “This is a more detailed description”
                            }
                        ]
                    }
                }
            end note
            DFSP <- NOTIFY_HANDLER: callback PUT on /transfers/{ID}
        else transferState in [RECEIVED, RESERVED, ABORTED]
            note left of NOTIFY_HANDLER #yellow
                {
                    “transferState”: “RECEIVED”,
                    extensionList:
                        {
                        extension:
                        [
                            {
                            “key”: “Description”,
                            “value”: “This is a more detailed description”
                            }
                        ]
                    }
                }
            end note
            DFSP <- NOTIFY_HANDLER: callback PUT on /transfers/{ID}
        end
        note right of NOTIFY_HANDLER #lightgray
            Log ERROR event
        end note
    else A transfer with the given ID is not present in the System or this is an invalid request
        note left of NOTIFY_HANDLER #yellow
            {
                "errorInformation": {
                    "errorCode": <integer>,
                    "errorDescription": "Client error description"
                }
            }
        end note
        DFSP <- NOTIFY_HANDLER: callback PUT on /transfers/{ID}/error
    end
    deactivate NOTIFY_HANDLER
deactivate DFSP
end
@enduml
